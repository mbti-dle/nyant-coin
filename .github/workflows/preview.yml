name: PR Preview Deployment
on:
  pull_request:
    types: [opened, synchronize]
    branches: 
      - '*'

jobs:
  preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to Render
        id: deploy
        env:
          RENDER_TOKEN: ${{ secrets.RENDER_API_KEY }}
        run: |
          RESPONSE=$(curl -X POST https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys \
            -H "Authorization: Bearer $RENDER_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}')
          DEPLOY_ID=$(echo $RESPONSE | jq -r '.id')
          echo "::set-output name=deploy_id::$DEPLOY_ID"

      - name: Wait for deployment and get preview URL
        id: preview_url
        env:
          RENDER_TOKEN: ${{ secrets.RENDER_API_KEY }}
        run: |
          DEPLOY_ID=${{ steps.deploy.outputs.deploy_id }}
          # Wait for deployment to complete (max 5 minutes)
          for i in {1..30}; do
            DEPLOY_STATUS=$(curl -H "Authorization: Bearer $RENDER_TOKEN" \
              https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys/$DEPLOY_ID \
              | jq -r '.status')
            
            if [ "$DEPLOY_STATUS" == "live" ]; then
              break
            elif [ "$DEPLOY_STATUS" == "failed" ]; then
              echo "Deployment failed"
              exit 1
            fi
            
            echo "Waiting for deployment to complete..."
            sleep 10
          done
          
          # Get the preview URL from Render service
          PREVIEW_URL=$(curl -H "Authorization: Bearer $RENDER_TOKEN" \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }} \
            | jq -r '.url')
          
          echo "::set-output name=url::$PREVIEW_URL"

      - name: Comment PR
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const previewUrl = '${{ steps.preview_url.outputs.url }}';
            const message = `ðŸš€ Preview deployment is ready!\n\nPreview URL: ${previewUrl}\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });